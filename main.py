import os
import asyncio
import logging
from typing import Optional
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, InputMediaPhoto, InputMediaVideo, InputMediaDocument, BotCommand
)
from aiogram.filters import Command
from dotenv import load_dotenv

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(
            os.path.join(LOG_DIR, "bot.log"), encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
if not CHAT_ID:
    raise ValueError("CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
CHAT_ID = int(CHAT_ID)

dp = Dispatcher()

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
ALLOWED_PHOTO_EXT = {".jpg", ".jpeg", ".png", ".webp", ".heic", ".heif"}
ALLOWED_VIDEO_EXT = {".mp4", ".mov", ".avi", ".mkv", ".wmv", ".webm", ".mpeg"}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 –ú–ë


media_buffer = {}


@dp.startup()
async def on_startup(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
    ]
    await bot.set_my_commands(commands)
    logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
def is_allowed_file(file_name: str) -> Optional[str]:
    ext = os.path.splitext(file_name.lower())[1]
    if ext in ALLOWED_PHOTO_EXT:
        return "photo"
    if ext in ALLOWED_VIDEO_EXT:
        return "video"
    return None


# –ö–æ–º–∞–Ω–¥–∞ /start (—Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã)
@dp.message(Command("start"))
async def start_cmd(msg: Message):
    if msg.chat.type != "private":
        return
    await msg.answer(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ üìå "
        "–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –º–æ–Ω—Ç–∞–∂–∞, —è –æ—Ç–ø—Ä–∞–≤–ª—é –∏—Ö –≤ —á–∞—Ç."
    )
    logger.info(
        f"{msg.from_user.full_name} ({msg.from_user.id}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /start")


# –ö–æ–º–∞–Ω–¥–∞ /id (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
@dp.message(Command("id"))
async def chat_id_cmd(msg: Message):
    await msg.answer(f"chat_id —ç—Ç–æ–≥–æ —á–∞—Ç–∞: "
                     f"<code>{msg.chat.id}</code>", parse_mode="HTML")
    logger.info(f"{msg.from_user.full_name} ({msg.from_user.id}) "
                f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /id ‚Üí chat_id={msg.chat.id}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–≤–∫–ª—é—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç—ã)
@dp.message(F.photo | F.video | F.document | F.media_group_id)
async def handle_media(msg: Message):
    media_group_id = msg.media_group_id or msg.message_id
    if media_group_id not in media_buffer:
        media_buffer[media_group_id] = []

    file_type = None
    file_id = None
    file_size = 0
    caption = msg.caption if msg.caption else None
    is_document = False

    if msg.photo:
        file_type = "photo"
        file_id = msg.photo[-1].file_id
        file_size = msg.photo[-1].file_size
    elif msg.video:
        file_type = "video"
        file_id = msg.video.file_id
        file_size = msg.video.file_size
    elif msg.document:
        kind = is_allowed_file(msg.document.file_name)
        if not kind:
            await msg.reply("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. "
                            "–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.")
            logger.warning(f"–û—Ç–∫–ª–æ–Ω—ë–Ω —Ñ–∞–π–ª: {msg.document.file_name}")
            return
        file_type = kind
        file_id = msg.document.file_id
        file_size = msg.document.file_size
        is_document = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if file_size > MAX_FILE_SIZE:
        await msg.reply(
            f"‚ùå–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n\n"
            f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {file_size / 1024 / 1024:.1f} –ú–ë\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä: "
            f"{MAX_FILE_SIZE / 1024 / 1024:.0f} –ú–ë\n\n"
            f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
        )
        logger.warning(
            f"–û—Ç–∫–ª–æ–Ω—ë–Ω –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {file_type}, —Ä–∞–∑–º–µ—Ä {file_size}")
        return

    if file_type and file_id:
        media_buffer[media_group_id].append(
            (file_type, file_id, caption, msg, is_document))

    await asyncio.sleep(2)

    if media_group_id in media_buffer:
        media_items = media_buffer.pop(media_group_id)
        if len(media_items) == 1:
            file_type, file_id, caption, msg, is_document = media_items[0]
            try:
                if file_type == "photo":
                    if not is_document:
                        await msg.bot.send_photo(
                            CHAT_ID, file_id,
                            caption=caption or f"üî© –°–±–æ—Ä–∫–∞ –æ—Ç "
                                               f"{msg.from_user.full_name}‚öíÔ∏è"
                        )
                    else:
                        await msg.bot.send_document(
                            CHAT_ID, file_id,
                            caption=caption or f"üî© –°–±–æ—Ä–∫–∞ –æ—Ç "
                                               f"{msg.from_user.full_name}‚öíÔ∏è"
                        )
                elif file_type == "video":
                    if not is_document:
                        await msg.bot.send_video(
                            CHAT_ID, file_id,
                            caption=caption or f"üî© –°–±–æ—Ä–∫–∞ –æ—Ç "
                                               f"{msg.from_user.full_name}‚öíÔ∏è"
                        )
                    else:
                        await msg.bot.send_document(
                            CHAT_ID, file_id,
                            caption=caption or f"üî© –°–±–æ—Ä–∫–∞ –æ—Ç "
                                               f"{msg.from_user.full_name}‚öíÔ∏è"
                        )
                await msg.reply("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                logger.info(f"{file_type.capitalize()} –æ—Ç "
                            f"{msg.from_user.full_name} "
                            f"({msg.from_user.id}) ‚Üí {CHAT_ID}")
            except Exception as e:
                await msg.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {file_type}: {e}")
        else:
            media = []
            for i, (
                file_type, file_id, caption, msg, is_document) in enumerate(
                    media_items):
                cap = caption or (f"üî© –°–±–æ—Ä–∫–∞ –æ—Ç "
                                  f"{msg.from_user.full_name}‚öíÔ∏è"
                                  if i == 0 else None)
                if file_type == "photo":
                    if not is_document:
                        media.append(
                            InputMediaPhoto(media=file_id, caption=cap))
                    else:
                        media.append(
                            InputMediaDocument(media=file_id, caption=cap))
                elif file_type == "video":
                    if not is_document:
                        media.append(
                            InputMediaVideo(media=file_id, caption=cap))
                    else:
                        media.append(
                            InputMediaDocument(media=file_id, caption=cap))
            try:
                await msg.bot.send_media_group(CHAT_ID, media=media)
                await msg.reply(
                    f"‚úÖ –ê–ª—å–±–æ–º ({len(media)} —à—Ç.) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                logger.info(f"–ê–ª—å–±–æ–º ({len(media)} —à—Ç.) –æ—Ç "
                            f"{msg.from_user.full_name} "
                            f"({msg.from_user.id}) ‚Üí {CHAT_ID}")
            except Exception as e:
                await msg.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∞–ª—å–±–æ–º–∞.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∞–ª—å–±–æ–º–∞: {e}")


# –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞)
@dp.message()
async def handle_unsupported(msg: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
    if msg.chat.type != "private":
        return
    if not msg.text or not msg.text.startswith("/"):
        await msg.reply("‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–æ—Ç –Ω–µ —É–º–µ–µ—Ç —á–∏—Ç–∞—Ç—å(üò¢ ")
        logger.info(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç "
                    f"{msg.from_user.full_name} ({msg.from_user.id})")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    async with Bot(token=BOT_TOKEN) as bot:
        await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
